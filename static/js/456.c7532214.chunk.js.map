{"version":3,"file":"static/js/456.c7532214.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.tsx","components/Cast/Cast.tsx","services/api.tsx"],"sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const List = styled.ul`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  border-radius: 5px;\r\n  box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\r\n    1px 4px 6px rgba(0, 0, 0, 0.16);\r\n  text-align: center;\r\n`;\r\n\r\nexport const Thumb = styled.div`\r\n  border-radius: 5px;\r\n  overflow: hidden;\r\n  width: 150px;\r\n  height: 150px;\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  padding: 4px;\r\n  width: 142px;\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n  font-size: 12px;\r\n  margin-bottom: 4px;\r\n`;\r\n\r\nexport const SubTitle = styled.p`\r\n  font-size: 12px;\r\n`;\r\n","import { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { getMovieCredits } from '../../services/api';\r\nimport { List, Item, Thumb, Wrapper, Title, SubTitle } from './Cast.styled';\r\nimport toast from 'react-hot-toast';\r\n\r\ntype CastType = {\r\n  cast_id: string;\r\n  name: string;\r\n  character: string;\r\n  profile_path: string;\r\n};\r\n\r\nconst Cast = () => {\r\n  const [cast, setCast] = useState<Array<CastType>>([]);\r\n  const { movieId } = useParams();\r\n\r\n  useEffect(() => {\r\n    if (!movieId) return;\r\n    const controller = new AbortController();\r\n    const signal = controller.signal;\r\n    const fetchData = async () => {\r\n      try {\r\n        const credits = await getMovieCredits(movieId, signal);\r\n        setCast(credits.cast);\r\n      } catch (error: any) {\r\n        if (error.name === 'CanceledError') return;\r\n        toast.error('Oops, something went wrong');\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n\r\n    return () => {\r\n      controller.abort();\r\n    };\r\n  }, [movieId]);\r\n\r\n  return cast?.length > 0 ? (\r\n    <List>\r\n      {cast.map(({ cast_id, name, character, profile_path }) => (\r\n        <Item key={cast_id}>\r\n          <Thumb>\r\n            <img\r\n              src={\r\n                profile_path\r\n                  ? `https://image.tmdb.org/t/p/w500${profile_path}`\r\n                  : `https://via.placeholder.com/150x150.png?text=No+photo`\r\n              }\r\n              alt={name}\r\n            />\r\n          </Thumb>\r\n          <Wrapper>\r\n            <Title>{name}</Title>\r\n            <SubTitle>{character}</SubTitle>\r\n          </Wrapper>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  ) : (\r\n    <p>We don`t have cast for this movie</p>\r\n  );\r\n};\r\n\r\nexport default Cast;\r\n","import axios from \"axios\";\r\n\r\naxios.defaults.baseURL = \"https://api.themoviedb.org/3\";\r\naxios.defaults.params = {\r\n  api_key: \"b60c32a6f6f2663f6a35c755ff35b4cc\",\r\n};\r\n\r\nexport const getTrendingMovies = async (\r\n  signal: any,\r\n  timePeriod: string,\r\n  page: number\r\n) => {\r\n  const response = await axios.get(\r\n    `/trending/movie/${timePeriod}?page=${page}`,\r\n    {\r\n      signal,\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\nexport const getMovieDetails = async (movieId: string, signal: any) => {\r\n  const response = await axios.get(`/movie/${movieId}`, {\r\n    signal,\r\n  });\r\n  return response.data;\r\n};\r\n\r\nexport const searchMovie = async (query: string, signal: any, page: number) => {\r\n  const response = await axios.get(\r\n    `/search/movie?query=${query}&page=${page}`,\r\n    {\r\n      signal,\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\nexport const getMovieCredits = async (movieId: string, signal: any) => {\r\n  const response = await axios.get(`/movie/${movieId}/credits`, {\r\n    signal,\r\n  });\r\n  return response.data;\r\n};\r\n\r\nexport const getMovieReviews = async (movieId: string, signal: any) => {\r\n  const response = await axios.get(`/movie/${movieId}/reviews`, {\r\n    signal,\r\n  });\r\n  return response.data;\r\n};\r\n"],"names":["List","styled","_templateObject","_taggedTemplateLiteral","Item","_templateObject2","Thumb","_templateObject3","Wrapper","_templateObject4","Title","_templateObject5","SubTitle","_templateObject6","_useState","useState","_useState2","_slicedToArray","cast","setCast","movieId","useParams","useEffect","controller","AbortController","signal","fetchData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","credits","wrap","_context","prev","next","getMovieCredits","sent","t0","name","abrupt","toast","stop","apply","arguments","abort","length","_jsx","children","map","_ref2","cast_id","character","profile_path","_jsxs","src","concat","alt","axios","api_key","getTrendingMovies","timePeriod","page","response","data","_x","_x2","_x3","getMovieDetails","_callee2","_context2","_x4","_x5","searchMovie","_ref3","_callee3","query","_context3","_x6","_x7","_x8","_ref4","_callee4","_context4","_x9","_x10","getMovieReviews","_ref5","_callee5","_context5","_x11","_x12"],"sourceRoot":""}